@page "/"
@page "/home"
@inject WeaponService weaponService
@inject StickerService stickerService
@inject InspectLinkService inspectService
@inject MarketplaceService marketplaceService

<PageTitle>CS2 Gencode Generator</PageTitle>



<section id="skingenerator">
    <div class="wrapper">
        <div class="container">

            @if (SelectedWeapon is not null)
            {
                var inspectLink = inspectService.GenerateInspectLink(SelectedWeapon, Float, Pattern, CustomName, SelectedStickers);
                 
                <div class="input-group mb-3">
                    
                    <div class="form-floating">
                        <input type="text" value="@SelectedWeapon.GetGencode(Float, Pattern, CustomName, SelectedStickers)" class="form-control" placeholder="Gencode" id="gencode" />
                        <label for="gencode">Gencode</label>
                    </div>
                  
                    @if (!inspectLink.commandMode)
                    {
                        <a class="inspect-btn btn btn-info" href="@inspectLink.url">Inspect</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-info" onclick="copyInspectCommand()">Copy Inspect</button>
                    }

                    <button type="button" class="btn btn-primary" onclick="copyGencode()"><i class="fa-solid fa-copy"></i></button>
                </div>
                
                if (inspectLink.commandMode)
                {
                    <Alert Color="AlertColor.Warning">
                        <strong>Attention!</strong> The generated inspect link is too long. In order to inspect the skin ingame you must paste the following command into the console.
                    </Alert>

                    <textarea value="@inspectLink.url" class="d-none" id="inspect-console-command" />
                } 
            }

            <div class="generator-wrapper">

                <div class="weapon-wrapper">
                    <div class="form-floating mb-3">
                        <input type="text" @bind="Settings.WeaponFilter.Searchterm" @bind:event="oninput" class="form-control" placeholder="Search weapon" id="search-weapon" />
                        <label for="search-weapon">Search weapon</label>
                    </div>
                    @if (weaponService.SearchWeapon(Settings.WeaponFilter).Any())
                    {
                        <div class="item-wrapper">
                            @foreach (var weapon in weaponService.SearchWeapon(Settings.WeaponFilter))
                            {
                                <DisplayWeapon Weapon="weapon" OnClick="OnWeaponClicked" />
                            }

                        </div>
                    }
                </div>

                <div class="sticker-wrapper">
                    <div class="form-floating mb-3">
                        @if (Settings.StickerFilter.BetaSearch)
                        {
                            <input type="text" @oninput="StartInputProcessing" class="form-control" placeholder="Search stickers" id="search-stickers" />
                        }
                        else
                        {
                            <input type="text" @bind="Settings.StickerFilter.Searchterm" @bind:event="oninput" class="form-control" placeholder="Search stickers" id="search-stickers" />
                        }
                        <label for="search-stickers">Search stickers</label>
                    </div>
                    @if (stickerService.SearchSticker(Settings.StickerFilter).Any())
                    {
                        <div class="item-wrapper">
                            @foreach (var sticker in stickerService.SearchSticker(Settings.StickerFilter))
                            {
                                <DisplaySticker Sticker="sticker" OnClick="OnStickerClicked" />
                            }
                        </div>
                    }
                </div>

                <div class="options-wrapper">
                    <div class="form-floating mb-3">
                        <input type="text" @bind="CustomName" class="form-control" placeholder="Custom name" id="custom-name" />
                        <label for="float">Custom name</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="number" @bind="Float" class="form-control" step=".0001" max="1" min="0" placeholder="Float" id="float" />
                        <label for="float">Float</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="number" @bind="Pattern" class="form-control" step="1" max="1000" min="0" placeholder="Pattern" id="pattern" />
                        <label for="pattern">Pattern</label>
                    </div>


                    @if (SelectedWeapon is not null)
                    {
                        <button type="button" class="btn btn-danger w-100 mb-1" @onclick="() => SelectedWeapon = null">Reset weapon</button>
                    }



                    @if (SelectedStickers.Any())
                    {
                        <div class="toolbar mb-3 d-flex gap-1">
                            <button type="button" class="btn btn-danger w-50" @onclick="RemoveLastSticker">Remove last sticker</button>
                            <button type="button" class="btn btn-danger w-50" @onclick="() => SelectedStickers.Clear()">Remove all stickers</button>
                        </div>
                        <a href="@marketplaceService.GetCsfloatDatabaseUrl(SelectedWeapon, SelectedStickers)" target="_blank" class="btn btn-primary d-block mb-1">csfloat database</a>

                        <h3 class="text-white">Search marketplace</h3>
                        <a href="@marketplaceService.GetSteamMarketUrl(SelectedStickers)" target="_blank" class="btn btn-primary d-block mb-1">Steam market</a>
                        <a href="@marketplaceService.GetCsfloatUrl(SelectedStickers)" target="_blank" class="btn btn-primary d-block mb-1">csfloat</a>
                        @if (!string.IsNullOrEmpty(marketplaceService.GetBuff163Url(SelectedStickers)))
                        {
                            <a href="@marketplaceService.GetBuff163Url(SelectedStickers)" target="_blank" class="btn btn-primary d-block mb-1">Buff163</a>
                        }

                        @if (!string.IsNullOrEmpty(marketplaceService.GetSkinportUrl(SelectedStickers)))
                        {
                            <a href="@marketplaceService.GetSkinportUrl(SelectedStickers)" target="_blank" class="btn btn-primary d-block mb-1">Skinport</a>
                        }

                        @if (!string.IsNullOrEmpty(marketplaceService.GetSkinbidUrl(SelectedStickers)))
                        {
                            <a href="@marketplaceService.GetSkinbidUrl(SelectedStickers)" target="_blank" class="btn btn-primary d-block mb-1">Skinbid</a>
                        }
                    }
                </div>


            </div>


        </div>
    </div>
</section>
<div class="selected-sticker-wrapper py-14 py-md-17">
    @foreach (var sticker in SelectedStickers)
    {
        var hashCode = sticker.GetHashCode();
        if (SelectedWeapon is not null && SelectedWeapon.StickerSlotsAmount != 5 && sticker.PosId == 4)
        {
            continue;
        }

        <div class="selected-sticker">
            <h5>@sticker.Name (Pos: @(sticker.PosId + 1))</h5>
            @if (!string.IsNullOrWhiteSpace(sticker.Image))
            {
                <div class="d-flex justify-content-center align-items-center">
                    <img class="img-responsive sticker-preview" src="@sticker.Image" alt="@sticker.Name" style="transform: rotate(@(sticker.Rotation.ToString(CultureInfo.InvariantCulture))deg);" />
                </div>
            }
            <EditForm Model="sticker">
                <div class="row">
                    <div class="col-md-6">
                        <label for="sticker-wear-@hashCode" class="form-label">Wear</label>
                        <input type="range"
                               @bind-value="sticker.Scratched"
                               @bind-value:event="oninput"
                               @bind-value:culture="CultureInfo.InvariantCulture"
                               class="form-range" id="sticker-wear-@hashCode" min="0" max="1" step="0.01" />
                        @sticker.Scratched
                    </div>
                    <div class="col-md-6">
                        <label for="sticker-rotation-@hashCode" class="form-label">Rotation</label>
                        <input type="range"
                               @bind-value="sticker.Rotation"
                               @bind-value:event="oninput"
                               @bind-value:culture="CultureInfo.InvariantCulture"
                               class="form-range" id="sticker-rotation-@hashCode" min="0" max="360" step="0.01" />
                        @sticker.Rotation
                    </div>

                    @if (Settings.EnableOffsets)
                    {
                        <div class="col-md-4">
                            <div class="form-floating mb-3">
                                <div class="form-floating mb-3">
                                    <input type="number" @bind="sticker.OffsetX" class="form-control" step="0.01" placeholder="OffsetX" id="offsetX" />
                                    <label for="offsetX">OffsetX</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-floating mb-3">
                                    <input type="number" @bind="sticker.OffsetY" class="form-control" step="0.01" placeholder="OffsetY" id="offsetY" />
                                    <label for="offsetY">OffsetY</label>
                                </div>
                        </div>
                    }

                    <div class="col-md-4">
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="sticker.PosId"
                                         class="form-select" id="@($"sticker-pos-{hashCode}")" aria-placeholder="Position">
                                <option value="0">1</option>
                                <option value="1">2</option>
                                <option value="2">3</option>
                                <option value="3">4</option>
                                <option value="4">5</option>
                            </InputSelect>
                            <label for="@($"sticker-pos{hashCode}")">Position</label>
                        </div>
                    </div>
                </div>
            </EditForm>


            <button type="button" @onclick="() => SelectedStickers.Remove(sticker)" class="btn btn-danger">Remove</button>
        </div>
    }
</div>

